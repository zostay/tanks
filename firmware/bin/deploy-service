#!/usr/bin/env raku

use v6;

constant $TANKS-HOME = $*HOME.add("projects/0/tanks");
constant $FIRMWARE-NAME= "firmware";
constant $DEPLOYER-NAME = "deployer";

# Depends on https://github.com/hypriot/flash
sub flash-firmware(:$cwd, :$cloud-init, :$firmware-img) {
    run :$cwd, 'flash', '-u', $cloud-init, $firmware-img;
}

sub firmware-home(IO::Path:D $tanks-home --> IO::Path:D) { $tanks-home.add($FIRMWARE-NAME) }
sub deployer-home(IO::Path:D $tanks-home --> IO::Path:D) { firmware-home($tanks-home).add($DEPLOYER-NAME) }

role ConfigObject { }
class DeploymentConfig does ConfigObject { ... }

my DeploymentConfig $*CONFIG;

sub template-config-file(IO::Path $file) {
    sub zostay-secret($name) {
        run(qqw<zostay-get-secret $name>, :out).out.lines.first;
    }

    sub b64($str) {
        use Base64;
        encode-base64($str, :str);#.comb(/ . ** 1..76 /).join("\n");
    }

    multi template-file(Str $file) { template-file($file.IO) }
    multi template-file(IO::Path $file) {
        template-config-file($*CONFIG.root-dir.add($file));
    }

    sub file($path) {
        $*CONFIG.dest-dir.add($path).slurp;
    }

    sub config(*@names) {
        my $this-config = $*CONFIG;
        for @names -> $name {
            die "no configuration found for <@names.join(' ')>"
                unless $this-config ~~ ConfigObject
                   and $this-config.^can($name);

            $this-config = $this-config."$name"();
        }
        $this-config;
    }

    $file.slurp.subst(/
            $<sp> = [ ^^ \s* ]?
        '{{{'
            $<ml> = [ "|" ]?
            $<code> = [ [ <-[\}]> | "}" <!before "}}"> ]+ ]
        "}}}"
    /, {
        my $sp   = ~$<sp>;
        my $ml   = ~$<ml>;
        my $code = ~$<code>;

        use MONKEY-SEE-NO-EVAL;
        my $content = EVAL $code;

        if $content ~~ / "\n" / {
            if $ml {
                $content .= indent($sp.chars);
            }
            else {
                $content .= trans(['"', "\n", "\r"] => ['\\"', "\\r", "\\n"]);
                $content = qq[$sp"$content"];
            }
        }
        else {
            $content = "$sp$content";
        }

        $content
    }, :g);
}

class DeploymentConfig {
    class Wifi does ConfigObject {
        has Str $.ssid is required;
        has Str $.password is required;
    }

    class File does ConfigObject {
        has Str $.name is required;
        has Str $.destination;

        method destination(--> Str) {
            $!destination // $!name
        }
    }

    has Str $.hostname is required;

    has IO::Path $.root-dir is required;

    has Str $.username is required;
    has Str $.password is required;

    has Wifi $.wifi is required;
    has Array[File] $.files is required;

    has %.flash is required;

    method from-file(::?CLASS:U:
        IO::Path $filename,
        *%overrides,
        --> DeploymentConfig:D
    ) {
        use Config::TOML;

        my %config = $filename.&template-config-file.&from-toml;
        %config<wifi> = Wifi.new(|%config<wifi>);
        %config<files> = Array[File].new(|%config<files>.map({ File.new(|$_) }));
        self.new(|%config, |%overrides);
    }
}

sub banner() {
    say Q:to/END_OF_AWESOMENESS/;

    TANK SETUP SCRIPT INITATING!!!

    PLEASE STAND BACK OR YOUR FACE WILL BE BURNED OFF BECAUSE OF MY

     ________  ___       __   _______   ________  ________  _____ ______   _______   ________   _______   ________   ________  ___  ___  ___
    |\   __  \|\  \     |\  \|\  ___ \ |\   ____\|\   __  \|\   _ \  _   \|\  ___ \ |\   ___  \|\  ___ \ |\   ____\ |\   ____\|\  \|\  \|\  \
    \ \  \|\  \ \  \    \ \  \ \   __/|\ \  \___|\ \  \|\  \ \  \\\__\ \  \ \   __/|\ \  \\ \  \ \   __/|\ \  \___|_\ \  \___|\ \  \ \  \ \  \
     \ \   __  \ \  \  __\ \  \ \  \_|/_\ \_____  \ \  \\\  \ \  \\|__| \  \ \  \_|/_\ \  \\ \  \ \  \_|/_\ \_____  \\ \_____  \ \  \ \  \ \  \
      \ \  \ \  \ \  \|\__\_\  \ \  \_|\ \|____|\  \ \  \\\  \ \  \    \ \  \ \  \_|\ \ \  \\ \  \ \  \_|\ \|____|\  \\|____|\  \ \__\ \__\ \__\
       \ \__\ \__\ \____________\ \_______\____\_\  \ \_______\ \__\    \ \__\ \_______\ \__\\ \__\ \_______\____\_\  \ ____\_\  \|__|\|__|\|__|
        \|__|\|__|\|____________|\|_______|\_________\|_______|\|__|     \|__|\|_______|\|__| \|__|\|_______|\_________\\_________\  ___  ___  ___
                                          \|_________|                                                      \|_________|\|________| |\__\|\__\|\__\
                                                                                                                                    \|__|\|__|\|__|

    END_OF_AWESOMENESS
}

sub make-tempdir(Str:D $name --> IO::Path:D) {
    my $dir-name = $name.subst("X", {
        ('a'..'z', 'A'..'Z', '0'..'9').flat.pick
    }, :global);
    my $tmp = $*TMPDIR.add($dir-name);
    $tmp.mkdir;
}

sub remove-tempdir(IO::Path:D $dir) {
    use File::Directory::Tree;
    rmtree $dir;
}

sub MAIN(
    Str $hostname,
    Str :$config,
    Str :$root = ~$TANKS-HOME,
) {
    banner;

    my $root-dir = deployer-home($root.IO);
    my $config-file = do with $config {
        $config.IO;
    }
    else {
        $root-dir.add('deploy.toml');
    }

    my $build-dir = make-tempdir('build-dir-XXXXXXXXXX');
    LEAVE {
        say "Cleaning up build directory.";
        remove-tempdir($build-dir);
    }

    say "Root directory: $root-dir.absolute()";
    say "Build directory: $build-dir.absolute()";
    print "Reading configuration $config-file ... ";
    $*CONFIG .= from-file($config-file,
        :$hostname,
        :$root-dir,
    );
    say "Done.";

    for $*CONFIG.files -> $file {
        my $src-file = $root-dir.add($file.name);
        print "Reading deployment file $src-file ... ";
        my $rendered-file = $src-file.&template-config-file;
        say "Done.";

        my $dest-file = $build-dir.add($src-file.basename);
        print "Writing build file $dest-file ... ";
        $dest-file.spurt($rendered-file);
        say "Done.";
    }

    flash-firmware(:cwd($build-dir), |$*CONFIG.flash);

    say "It is finished.";
}

# vim: ft=raku
